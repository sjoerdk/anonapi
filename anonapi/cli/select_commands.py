"""Click group and commands for the 'select' subcommand"""
import os
import re

import click
from click.exceptions import ClickException

from anonapi.decorators import pass_anonapi_context
from anonapi.selection import FileFolder, open_as_dicom
from fileselection.fileselection import FileSelectionFolder, FileSelectionFile
from pathlib import Path
from tqdm import tqdm


class CLIMessages:
    NO_SELECTION_DEFINED = "There is no selection defined in current folder"


class SelectCommandContext:
    def __init__(self, current_path):
        self.current_path = Path(current_path)

    def get_current_selection_folder(self):
        return FileSelectionFolder(self.current_path)

    def get_current_selection(self):
        """Load selection in current folder

        Returns
        -------
        FileSelectionFile

        Raises
        ------
        FileNotFoundError
            When there is no selection in current folder

        """

        return self.get_current_selection_folder().load_file_selection()


pass_select_command_context = click.make_pass_decorator(SelectCommandContext)


def describe_selection(selection):
    """Create a human-readable description of the given selection

    Parameters
    ----------
    selection: FileSelectionFile


    Returns
    -------
    str

    """
    return (
        f"Selection containing {len(selection.selected_paths)} files:\n"
        f"Description: {selection.description}"
    )


@click.group(name="select")
@click.pass_context
@pass_anonapi_context
def main(context: SelectCommandContext, ctx):
    """Select files for a single anonymization job"""
    ctx.obj = SelectCommandContext(current_path=context.current_dir)


@click.command()
@pass_select_command_context
def status(context: SelectCommandContext):
    """Show selection in current directory"""
    try:
        selection = context.get_current_selection()
        click.echo(describe_selection(selection))
    except FileNotFoundError:
        raise ClickException(CLIMessages.NO_SELECTION_DEFINED)


@click.command()
@pass_select_command_context
def delete(context: SelectCommandContext):
    """Remove selection file in current directory"""

    selection_folder = context.get_current_selection_folder()
    if selection_folder.has_file_selection():
        os.remove(selection_folder.get_data_file_path())
        click.echo("Removed file selection in current folder")
    else:
        raise ClickException(CLIMessages.NO_SELECTION_DEFINED)


@click.command()
@pass_select_command_context
@click.argument("pattern", type=str)
@click.option(
    "--recurse/--no-recurse",
    default=True,
    help="Search for files to add in subfolders as well. On by default",
)
@click.option(
    "--check-dicom/--no-check-dicom",
    default=False,
    help="Only add files that are valid DICOM file. For many files, this might "
    "take some time. Off by default.",
)
@click.option(
    "--exclude-pattern",
    "-e",
    multiple=True,
    help="Exclude any file matching the given pattern. The pattern can use ``*`` "
    "to match any part of a name. --exclude-pattern can be used "
    "multiple times, to exclude multiple patterns",
)
def add(context: SelectCommandContext, pattern, recurse, check_dicom, exclude_pattern):
    """Add all files matching pattern to selection in the current directory.

    Excludes 'fileselection.txt'
    """
    click.echo(f"Finding files...")
    current_folder = FileFolder(context.current_path)
    paths = list(
        tqdm(
            current_folder.iterate(
                pattern=pattern,
                recurse=recurse,
                exclude_patterns=["fileselection.txt"] + list(exclude_pattern),
            )
        )
    )

    if check_dicom:
        click.echo("Checking that each file is Dicom")
        paths = [x for x in tqdm(paths) if open_as_dicom(x)]

    selection_folder = context.get_current_selection_folder()
    if selection_folder.has_file_selection():
        selection = selection_folder.load_file_selection()
        selection.add(paths)
    else:
        selection = selection_folder.create_file_selection_file(
            description=selection_folder.path.name + " auto-generated by anonapi",
            selected_paths=paths,
        )

    selection.save_to_file()
    click.echo(f"selection now contains {len(selection.selected_paths)} files")


@click.command()
@pass_select_command_context
def edit(context: SelectCommandContext):
    """Open selection file in default editor"""

    selection_folder = context.get_current_selection_folder()
    if not selection_folder.has_file_selection():
        raise ClickException(CLIMessages.NO_SELECTION_DEFINED)
    else:
        click.launch(str(selection_folder.get_data_file_path()))


def looks_like_dicom_file(path):
    """Does this file path look like a DICOM file?

    For doing a first quick selection of which files to include for deidentification
    """

    if Path(path).suffix.lower() in (".dicom", ".dcm"):
        return True
    elif re.match(r"^(\.[0-9]*)*$", Path(path).suffix):
        # there are only numbers in the extension. This might be a DICOM file
        return True
    else:
        return False


def create_dicom_selection_click(path, check_dicom=True):
    """Find all DICOM files path (recursive) and save them a FileSelectionFile.

    Meant to be included directly inside click commands. Uses a lot of click.echo()

    Parameters
    ----------
    path: PathLike
    check_dicom: bool, optional
        open each file to see whether it is valid DICOM. Setting False is faster
        but could include files that will fail the job in IDIS. Defaults to True

    Returns
    -------
    FileSelectionFile
        The created file selection
    """
    # Find all dicom files in this folder
    click.echo(f"Adding '{path}' to mapping")
    folder = FileFolder(path)
    click.echo(f"Finding all files in {path}")
    files = [x for x in tqdm(folder.iterate()) if x is not None]
    if check_dicom:
        click.echo(f"Found {len(files)} files. Finding out which ones are DICOM")
        dicom_files = [
            x for x in tqdm(files) if open_as_dicom(x, read_pixel_data=False)
        ]
    else:
        click.echo(f"Found {len(files)} files. Adding all that look like DICOM")
        dicom_files = [x for x in files if looks_like_dicom_file(x)]

    click.echo(f"Found {len(dicom_files)} DICOM files")
    # record dicom files as fileselection
    selection_folder = FileSelectionFolder(path=path.absolute())
    selection = FileSelectionFile(
        data_file_path=selection_folder.get_data_file_path(),
        description=Path(path).name + " auto-generated by anonapi",
        selected_paths=[x.relative_to(folder.path) for x in dicom_files],
    )
    selection_folder.save_file_selection(selection)
    return selection


for func in [status, delete, edit, add]:
    main.add_command(func)
